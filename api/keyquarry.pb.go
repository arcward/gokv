// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: api/keyquarry.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// KeyEvent reflects the type of event that occurred for a key
type KeyEvent int32

const (
	KeyEvent_NO_EVENT         KeyEvent = 0
	KeyEvent_CREATED          KeyEvent = 1  // Key was created
	KeyEvent_UPDATED          KeyEvent = 2  // Key value was updated
	KeyEvent_DELETED          KeyEvent = 3  // Key was deleted
	KeyEvent_EXPIRED          KeyEvent = 4  // Key expired
	KeyEvent_LOCKED           KeyEvent = 5  // Key was locked
	KeyEvent_UNLOCKED         KeyEvent = 6  // Key was unlocked
	KeyEvent_EXPUNGED         KeyEvent = 7  // Key was expunged/pruned
	KeyEvent_ACCESSED         KeyEvent = 8  // Key value was accessed
	KeyEvent_LIFESPAN_SET     KeyEvent = 9  // Key lifespan was set
	KeyEvent_LIFESPAN_RENEWED KeyEvent = 10 // Key lifespan was renewed via an update to the key value
)

// Enum value maps for KeyEvent.
var (
	KeyEvent_name = map[int32]string{
		0:  "NO_EVENT",
		1:  "CREATED",
		2:  "UPDATED",
		3:  "DELETED",
		4:  "EXPIRED",
		5:  "LOCKED",
		6:  "UNLOCKED",
		7:  "EXPUNGED",
		8:  "ACCESSED",
		9:  "LIFESPAN_SET",
		10: "LIFESPAN_RENEWED",
	}
	KeyEvent_value = map[string]int32{
		"NO_EVENT":         0,
		"CREATED":          1,
		"UPDATED":          2,
		"DELETED":          3,
		"EXPIRED":          4,
		"LOCKED":           5,
		"UNLOCKED":         6,
		"EXPUNGED":         7,
		"ACCESSED":         8,
		"LIFESPAN_SET":     9,
		"LIFESPAN_RENEWED": 10,
	}
)

func (x KeyEvent) Enum() *KeyEvent {
	p := new(KeyEvent)
	*p = x
	return p
}

func (x KeyEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_api_keyquarry_proto_enumTypes[0].Descriptor()
}

func (KeyEvent) Type() protoreflect.EnumType {
	return &file_api_keyquarry_proto_enumTypes[0]
}

func (x KeyEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyEvent.Descriptor instead.
func (KeyEvent) EnumDescriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{0}
}

type WatchKeyValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *WatchKeyValueRequest) Reset() {
	*x = WatchKeyValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchKeyValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchKeyValueRequest) ProtoMessage() {}

func (x *WatchKeyValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchKeyValueRequest.ProtoReflect.Descriptor instead.
func (*WatchKeyValueRequest) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{0}
}

func (x *WatchKeyValueRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type WatchKeyValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key            string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value          []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ContentType    string                 `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Hash           uint64                 `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Version        uint64                 `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	KeyEvent       KeyEvent               `protobuf:"varint,6,opt,name=key_event,json=keyEvent,proto3,enum=keyquarry.KeyEvent" json:"key_event,omitempty"`
	EventClientId  string                 `protobuf:"bytes,7,opt,name=event_client_id,json=eventClientId,proto3" json:"event_client_id,omitempty"`
	EventTimestamp *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=event_timestamp,json=eventTimestamp,proto3" json:"event_timestamp,omitempty"`
}

func (x *WatchKeyValueResponse) Reset() {
	*x = WatchKeyValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchKeyValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchKeyValueResponse) ProtoMessage() {}

func (x *WatchKeyValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchKeyValueResponse.ProtoReflect.Descriptor instead.
func (*WatchKeyValueResponse) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{1}
}

func (x *WatchKeyValueResponse) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *WatchKeyValueResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *WatchKeyValueResponse) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *WatchKeyValueResponse) GetHash() uint64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *WatchKeyValueResponse) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *WatchKeyValueResponse) GetKeyEvent() KeyEvent {
	if x != nil {
		return x.KeyEvent
	}
	return KeyEvent_NO_EVENT
}

func (x *WatchKeyValueResponse) GetEventClientId() string {
	if x != nil {
		return x.EventClientId
	}
	return ""
}

func (x *WatchKeyValueResponse) GetEventTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTimestamp
	}
	return nil
}

type WatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys      []string   `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	Events    []KeyEvent `protobuf:"varint,2,rep,packed,name=events,proto3,enum=keyquarry.KeyEvent" json:"events,omitempty"`
	ClientIds []string   `protobuf:"bytes,3,rep,name=client_ids,json=clientIds,proto3" json:"client_ids,omitempty"`
}

func (x *WatchRequest) Reset() {
	*x = WatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRequest) ProtoMessage() {}

func (x *WatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRequest.ProtoReflect.Descriptor instead.
func (*WatchRequest) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{2}
}

func (x *WatchRequest) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *WatchRequest) GetEvents() []KeyEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *WatchRequest) GetClientIds() []string {
	if x != nil {
		return x.ClientIds
	}
	return nil
}

type ReadOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *ReadOnlyRequest) Reset() {
	*x = ReadOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadOnlyRequest) ProtoMessage() {}

func (x *ReadOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadOnlyRequest.ProtoReflect.Descriptor instead.
func (*ReadOnlyRequest) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{3}
}

func (x *ReadOnlyRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type ReadOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ReadOnlyResponse) Reset() {
	*x = ReadOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadOnlyResponse) ProtoMessage() {}

func (x *ReadOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadOnlyResponse.ProtoReflect.Descriptor instead.
func (*ReadOnlyResponse) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{4}
}

func (x *ReadOnlyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{5}
}

type RegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegisterResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type PopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *PopRequest) Reset() {
	*x = PopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopRequest) ProtoMessage() {}

func (x *PopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopRequest.ProtoReflect.Descriptor instead.
func (*PopRequest) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{8}
}

func (x *PopRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type GetRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Version int64  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetRevisionRequest) Reset() {
	*x = GetRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevisionRequest) ProtoMessage() {}

func (x *GetRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevisionRequest.ProtoReflect.Descriptor instead.
func (*GetRevisionRequest) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{9}
}

func (x *GetRevisionRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetRevisionRequest) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type RevisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     []byte                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *RevisionResponse) Reset() {
	*x = RevisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevisionResponse) ProtoMessage() {}

func (x *RevisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevisionResponse.ProtoReflect.Descriptor instead.
func (*RevisionResponse) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{10}
}

func (x *RevisionResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RevisionResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{11}
}

// ListKeysRequest represents a request to list keys in the store. The pattern
// field is a glob pattern to match keys against. The limit field is the maximum
// number of keys to return.
type ListKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pattern         string `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`                                         // Regex pattern to match keys against
	Limit           uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`                                            // Maximum number of keys to return (0 for no limit)
	IncludeReserved bool   `protobuf:"varint,3,opt,name=include_reserved,json=includeReserved,proto3" json:"include_reserved,omitempty"` // true to include reserved keys
}

func (x *ListKeysRequest) Reset() {
	*x = ListKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeysRequest) ProtoMessage() {}

func (x *ListKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeysRequest.ProtoReflect.Descriptor instead.
func (*ListKeysRequest) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{12}
}

func (x *ListKeysRequest) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *ListKeysRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListKeysRequest) GetIncludeReserved() bool {
	if x != nil {
		return x.IncludeReserved
	}
	return false
}

// ServerMetrics describes the current state of the server
type ServerMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Keys is the current number of keys in the store
	Keys *uint64 `protobuf:"varint,1,opt,name=keys,proto3,oneof" json:"keys,omitempty"`
	// TotalSize is the sum (in bytes) of the current value sizes for all keys
	// in the store
	TotalSize *uint64 `protobuf:"varint,2,opt,name=total_size,json=totalSize,proto3,oneof" json:"total_size,omitempty"`
	// CurrentLocks is the current number of active locks
	CurrentLocks *uint64 `protobuf:"varint,3,opt,name=current_locks,json=currentLocks,proto3,oneof" json:"current_locks,omitempty"`
	// ClientIds is the number of registered clients
	ClientIds *uint64 `protobuf:"varint,4,opt,name=client_ids,json=clientIds,proto3,oneof" json:"client_ids,omitempty"`
	// Reapers is the current number of active reapers
	Reapers *uint64 `protobuf:"varint,5,opt,name=reapers,proto3,oneof" json:"reapers,omitempty"`
	// EventSubscribers is the current number of active event subscribers
	EventSubscribers *uint64 `protobuf:"varint,6,opt,name=event_subscribers,json=eventSubscribers,proto3,oneof" json:"event_subscribers,omitempty"`
	// SnapshotsCreated is the number of snapshots created since the server started
	SnapshotsCreated *uint64 `protobuf:"varint,7,opt,name=snapshots_created,json=snapshotsCreated,proto3,oneof" json:"snapshots_created,omitempty"`
	// EagerPruneTriggered is the number of times an eager prune was triggered
	// due to a request to create a new key while the store is at capacity
	EagerPruneTriggered *uint64 `protobuf:"varint,8,opt,name=eager_prune_triggered,json=eagerPruneTriggered,proto3,oneof" json:"eager_prune_triggered,omitempty"`
	// PruneCompleted is the number of times the pruning job ran,
	// while over the configured prune threshold
	PruneCompleted *uint64         `protobuf:"varint,9,opt,name=prune_completed,json=pruneCompleted,proto3,oneof" json:"prune_completed,omitempty"`
	Events         *EventMetrics   `protobuf:"bytes,10,opt,name=events,proto3" json:"events,omitempty"`
	Pressure       *KeyPressure    `protobuf:"bytes,11,opt,name=pressure,proto3" json:"pressure,omitempty"`
	History        *HistoryMetrics `protobuf:"bytes,12,opt,name=history,proto3" json:"history,omitempty"`
}

func (x *ServerMetrics) Reset() {
	*x = ServerMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMetrics) ProtoMessage() {}

func (x *ServerMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMetrics.ProtoReflect.Descriptor instead.
func (*ServerMetrics) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{13}
}

func (x *ServerMetrics) GetKeys() uint64 {
	if x != nil && x.Keys != nil {
		return *x.Keys
	}
	return 0
}

func (x *ServerMetrics) GetTotalSize() uint64 {
	if x != nil && x.TotalSize != nil {
		return *x.TotalSize
	}
	return 0
}

func (x *ServerMetrics) GetCurrentLocks() uint64 {
	if x != nil && x.CurrentLocks != nil {
		return *x.CurrentLocks
	}
	return 0
}

func (x *ServerMetrics) GetClientIds() uint64 {
	if x != nil && x.ClientIds != nil {
		return *x.ClientIds
	}
	return 0
}

func (x *ServerMetrics) GetReapers() uint64 {
	if x != nil && x.Reapers != nil {
		return *x.Reapers
	}
	return 0
}

func (x *ServerMetrics) GetEventSubscribers() uint64 {
	if x != nil && x.EventSubscribers != nil {
		return *x.EventSubscribers
	}
	return 0
}

func (x *ServerMetrics) GetSnapshotsCreated() uint64 {
	if x != nil && x.SnapshotsCreated != nil {
		return *x.SnapshotsCreated
	}
	return 0
}

func (x *ServerMetrics) GetEagerPruneTriggered() uint64 {
	if x != nil && x.EagerPruneTriggered != nil {
		return *x.EagerPruneTriggered
	}
	return 0
}

func (x *ServerMetrics) GetPruneCompleted() uint64 {
	if x != nil && x.PruneCompleted != nil {
		return *x.PruneCompleted
	}
	return 0
}

func (x *ServerMetrics) GetEvents() *EventMetrics {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ServerMetrics) GetPressure() *KeyPressure {
	if x != nil {
		return x.Pressure
	}
	return nil
}

func (x *ServerMetrics) GetHistory() *HistoryMetrics {
	if x != nil {
		return x.History
	}
	return nil
}

type HistoryMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys      *uint64 `protobuf:"varint,1,opt,name=keys,proto3,oneof" json:"keys,omitempty"`
	Revisions *uint64 `protobuf:"varint,2,opt,name=revisions,proto3,oneof" json:"revisions,omitempty"`
}

func (x *HistoryMetrics) Reset() {
	*x = HistoryMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryMetrics) ProtoMessage() {}

func (x *HistoryMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryMetrics.ProtoReflect.Descriptor instead.
func (*HistoryMetrics) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{14}
}

func (x *HistoryMetrics) GetKeys() uint64 {
	if x != nil && x.Keys != nil {
		return *x.Keys
	}
	return 0
}

func (x *HistoryMetrics) GetRevisions() uint64 {
	if x != nil && x.Revisions != nil {
		return *x.Revisions
	}
	return 0
}

// EventMetrics includes counts of KeyEvent types seen
type EventMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New is the number of new keys created
	New *uint64 `protobuf:"varint,1,opt,name=new,proto3,oneof" json:"new,omitempty"`
	// Updated is the number of times an existing key's value was updated
	Updated *uint64 `protobuf:"varint,2,opt,name=updated,proto3,oneof" json:"updated,omitempty"`
	// Deleted is the number of delete events
	Deleted *uint64 `protobuf:"varint,3,opt,name=deleted,proto3,oneof" json:"deleted,omitempty"`
	// Locked is the number of times a key was locked
	Locked *uint64 `protobuf:"varint,4,opt,name=locked,proto3,oneof" json:"locked,omitempty"`
	// Unlocked is the number of times a key was unlocked
	Unlocked *uint64 `protobuf:"varint,5,opt,name=unlocked,proto3,oneof" json:"unlocked,omitempty"`
	// Expired is the number of times a key expired
	Expired *uint64 `protobuf:"varint,6,opt,name=expired,proto3,oneof" json:"expired,omitempty"`
	// Expunged is the number of times a key was expunged/pruned
	Expunged *uint64 `protobuf:"varint,7,opt,name=expunged,proto3,oneof" json:"expunged,omitempty"`
	// Accessed is the number of times a key's value was accessed,
	// either by a Set, Pop, or Inspect with include_value=true request
	Accessed *uint64 `protobuf:"varint,8,opt,name=accessed,proto3,oneof" json:"accessed,omitempty"`
	// LifespanSet is the number of times a key lifespan was initially
	// set, or an existing lifespan was changed
	LifespanSet *uint64 `protobuf:"varint,9,opt,name=lifespan_set,json=lifespanSet,proto3,oneof" json:"lifespan_set,omitempty"`
	// LifespanRenewed is the number of times a key's lifespan was
	// extended via an update to the key value, or by setting
	// the lifespan on an existing key to its current lifespan value
	LifespanRenewed *uint64 `protobuf:"varint,10,opt,name=lifespan_renewed,json=lifespanRenewed,proto3,oneof" json:"lifespan_renewed,omitempty"`
}

func (x *EventMetrics) Reset() {
	*x = EventMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMetrics) ProtoMessage() {}

func (x *EventMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMetrics.ProtoReflect.Descriptor instead.
func (*EventMetrics) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{15}
}

func (x *EventMetrics) GetNew() uint64 {
	if x != nil && x.New != nil {
		return *x.New
	}
	return 0
}

func (x *EventMetrics) GetUpdated() uint64 {
	if x != nil && x.Updated != nil {
		return *x.Updated
	}
	return 0
}

func (x *EventMetrics) GetDeleted() uint64 {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return 0
}

func (x *EventMetrics) GetLocked() uint64 {
	if x != nil && x.Locked != nil {
		return *x.Locked
	}
	return 0
}

func (x *EventMetrics) GetUnlocked() uint64 {
	if x != nil && x.Unlocked != nil {
		return *x.Unlocked
	}
	return 0
}

func (x *EventMetrics) GetExpired() uint64 {
	if x != nil && x.Expired != nil {
		return *x.Expired
	}
	return 0
}

func (x *EventMetrics) GetExpunged() uint64 {
	if x != nil && x.Expunged != nil {
		return *x.Expunged
	}
	return 0
}

func (x *EventMetrics) GetAccessed() uint64 {
	if x != nil && x.Accessed != nil {
		return *x.Accessed
	}
	return 0
}

func (x *EventMetrics) GetLifespanSet() uint64 {
	if x != nil && x.LifespanSet != nil {
		return *x.LifespanSet
	}
	return 0
}

func (x *EventMetrics) GetLifespanRenewed() uint64 {
	if x != nil && x.LifespanRenewed != nil {
		return *x.LifespanRenewed
	}
	return 0
}

// KeyPressure represents the pressure on the key store,
// which is the current number of keys as related to the
// configured maximum, and prune settings
type KeyPressure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Keys is the current number of keys in the store
	Keys *uint64 `protobuf:"varint,1,opt,name=keys,proto3,oneof" json:"keys,omitempty"`
	// Max is the configured maximum number of keys (Config.MaxNumberOfKeys)
	Max *uint64 `protobuf:"varint,2,opt,name=max,proto3,oneof" json:"max,omitempty"`
	// Used is the current number of keys divided by the maximum number of keys
	Used *float32 `protobuf:"fixed32,3,opt,name=used,proto3,oneof" json:"used,omitempty"`
}

func (x *KeyPressure) Reset() {
	*x = KeyPressure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyPressure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPressure) ProtoMessage() {}

func (x *KeyPressure) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPressure.ProtoReflect.Descriptor instead.
func (*KeyPressure) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{16}
}

func (x *KeyPressure) GetKeys() uint64 {
	if x != nil && x.Keys != nil {
		return *x.Keys
	}
	return 0
}

func (x *KeyPressure) GetMax() uint64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *KeyPressure) GetUsed() float32 {
	if x != nil && x.Used != nil {
		return *x.Used
	}
	return 0
}

// KeyValue represents a key/value pair
type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key is a unique identifier for this key-value pair. If the key already
	// exists, its value will be updated, as long as there's no active lock
	// by another client.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Value to associate with the key.
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Content type to set. If not set, the content type will be inferred from
	// the value.
	ContentType string `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// LockDuration either sets a new lock for the key with the
	// provided duration, or updates the duration of an existing lock.
	// If a lock exists under another client, an error will be returned.
	LockDuration *durationpb.Duration `protobuf:"bytes,4,opt,name=lock_duration,json=lockDuration,proto3,oneof" json:"lock_duration,omitempty"`
	// Lifespan is a duration after which the key will be automatically
	// deleted. This overrides any existing lock (so if you lock a key
	// for longer than its lifespan, it will be deleted before the lock
	// expires).
	// Subsequent updates to the key will reset the lifespan timer. If
	// you specify a lifespan on a key that already has a lifespan, the
	// new lifespan will be used.
	Lifespan *durationpb.Duration `protobuf:"bytes,5,opt,name=lifespan,proto3,oneof" json:"lifespan,omitempty"` // Expiration options
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{17}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *KeyValue) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *KeyValue) GetLockDuration() *durationpb.Duration {
	if x != nil {
		return x.LockDuration
	}
	return nil
}

func (x *KeyValue) GetLifespan() *durationpb.Duration {
	if x != nil {
		return x.Lifespan
	}
	return nil
}

// UnlockRequest represents a request to unlock a key. If the key
// is not already locked, nothing will happen. If the key is locked
// by another client, an error will be returned.
type UnlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *UnlockRequest) Reset() {
	*x = UnlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockRequest) ProtoMessage() {}

func (x *UnlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockRequest.ProtoReflect.Descriptor instead.
func (*UnlockRequest) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{18}
}

func (x *UnlockRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// UnlockResponse indicates whether a key was unlocked
type UnlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UnlockResponse) Reset() {
	*x = UnlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockResponse) ProtoMessage() {}

func (x *UnlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockResponse.ProtoReflect.Descriptor instead.
func (*UnlockResponse) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{19}
}

func (x *UnlockResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// LockRequest represents a request to lock a key
type LockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key is the key to lock
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Duration to lock the key, after which it will automatically unlock.
	Duration *durationpb.Duration `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	// CreateIfMissing will create the key with an empty value, if it doesn't
	// already exist.
	CreateIfMissing bool `protobuf:"varint,3,opt,name=create_if_missing,json=createIfMissing,proto3" json:"create_if_missing,omitempty"`
}

func (x *LockRequest) Reset() {
	*x = LockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockRequest) ProtoMessage() {}

func (x *LockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockRequest.ProtoReflect.Descriptor instead.
func (*LockRequest) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{20}
}

func (x *LockRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LockRequest) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *LockRequest) GetCreateIfMissing() bool {
	if x != nil {
		return x.CreateIfMissing
	}
	return false
}

// LockResponse indicates whether a key was locked
type LockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // true if the lock was acquired
}

func (x *LockResponse) Reset() {
	*x = LockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockResponse) ProtoMessage() {}

func (x *LockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockResponse.ProtoReflect.Descriptor instead.
func (*LockResponse) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{21}
}

func (x *LockResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// ListKeysResponse represents a list of keys
type ListKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *ListKeysResponse) Reset() {
	*x = ListKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeysResponse) ProtoMessage() {}

func (x *ListKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeysResponse.ProtoReflect.Descriptor instead.
func (*ListKeysResponse) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{22}
}

func (x *ListKeysResponse) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type ClearHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys    int64 `protobuf:"varint,1,opt,name=keys,proto3" json:"keys,omitempty"`       // Number of keys cleared
	Cleared int64 `protobuf:"varint,2,opt,name=cleared,proto3" json:"cleared,omitempty"` // Number of history entries cleared
}

func (x *ClearHistoryResponse) Reset() {
	*x = ClearHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearHistoryResponse) ProtoMessage() {}

func (x *ClearHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearHistoryResponse.ProtoReflect.Descriptor instead.
func (*ClearHistoryResponse) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{23}
}

func (x *ClearHistoryResponse) GetKeys() int64 {
	if x != nil {
		return x.Keys
	}
	return 0
}

func (x *ClearHistoryResponse) GetCleared() int64 {
	if x != nil {
		return x.Cleared
	}
	return 0
}

// InspectResponse represents the metadata for a key/value pair
type InspectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`               // Key of value
	Hash        uint64                 `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty"`            // Hash is the FNV hash of the value
	Created     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`       // Unix timestamp of when the key was created
	Updated     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated,proto3,oneof" json:"updated,omitempty"` // Unix timestamp of when the key was last updated
	Version     uint64                 `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`      // Version of the key (incremented on each update)
	Size        uint64                 `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`            // Size of the value in bytes
	Locked      *bool                  `protobuf:"varint,8,opt,name=locked,proto3,oneof" json:"locked,omitempty"`  // true if the key is locked
	Lifespan    *durationpb.Duration   `protobuf:"bytes,9,opt,name=lifespan,proto3" json:"lifespan,omitempty"`
	LifespanSet *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=lifespan_set,json=lifespanSet,proto3" json:"lifespan_set,omitempty"`
	ContentType string                 `protobuf:"bytes,11,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"` // Content type of the value
	Value       []byte                 `protobuf:"bytes,12,opt,name=value,proto3,oneof" json:"value,omitempty"`
	Metrics     *KeyMetric             `protobuf:"bytes,13,opt,name=metrics,proto3,oneof" json:"metrics,omitempty"`
}

func (x *InspectResponse) Reset() {
	*x = InspectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectResponse) ProtoMessage() {}

func (x *InspectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectResponse.ProtoReflect.Descriptor instead.
func (*InspectResponse) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{24}
}

func (x *InspectResponse) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *InspectResponse) GetHash() uint64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *InspectResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *InspectResponse) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *InspectResponse) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *InspectResponse) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *InspectResponse) GetLocked() bool {
	if x != nil && x.Locked != nil {
		return *x.Locked
	}
	return false
}

func (x *InspectResponse) GetLifespan() *durationpb.Duration {
	if x != nil {
		return x.Lifespan
	}
	return nil
}

func (x *InspectResponse) GetLifespanSet() *timestamppb.Timestamp {
	if x != nil {
		return x.LifespanSet
	}
	return nil
}

func (x *InspectResponse) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *InspectResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InspectResponse) GetMetrics() *KeyMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type KeyMetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *KeyMetricRequest) Reset() {
	*x = KeyMetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyMetricRequest) ProtoMessage() {}

func (x *KeyMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyMetricRequest.ProtoReflect.Descriptor instead.
func (*KeyMetricRequest) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{25}
}

func (x *KeyMetricRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// KeyMetric provides counters and timestamps for
// access/set/lock operations for the global lifetime
// of a key. These metrics survive key deletions/expirations/etc,
// as well as server restarts if snapshotting is enabled.
type KeyMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccessCount is the number of times the value
	// of the key has been accessed, either via
	// Get, Pop, or Inspect with include_value=true
	AccessCount uint64 `protobuf:"varint,1,opt,name=access_count,json=accessCount,proto3" json:"access_count,omitempty"`
	// FirstAccessed is the timestamp of the first time
	// the key value was accessed
	FirstAccessed *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=first_accessed,json=firstAccessed,proto3" json:"first_accessed,omitempty"`
	// LastAccessed is the timestamp of the most recent
	// access
	LastAccessed *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_accessed,json=lastAccessed,proto3" json:"last_accessed,omitempty"`
	// SetCount is the number of times the value has been
	// set or updated
	SetCount uint64 `protobuf:"varint,4,opt,name=set_count,json=setCount,proto3" json:"set_count,omitempty"`
	// FirstSet is the timestamp of the first time the value
	// of the key was set.
	FirstSet *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=first_set,json=firstSet,proto3" json:"first_set,omitempty"`
	// LastSet is the timestamp of the most recent time
	// the value was set or updated.
	LastSet *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_set,json=lastSet,proto3" json:"last_set,omitempty"`
	// LockCount is the number of times the key has been locked.
	LockCount uint64 `protobuf:"varint,7,opt,name=lock_count,json=lockCount,proto3" json:"lock_count,omitempty"`
	// FirstLocked is the timestamp of the first time the key was locked
	FirstLocked *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=first_locked,json=firstLocked,proto3" json:"first_locked,omitempty"`
	// LastLocked is the timestamp of the most recent time the key was locked
	LastLocked *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=last_locked,json=lastLocked,proto3" json:"last_locked,omitempty"`
}

func (x *KeyMetric) Reset() {
	*x = KeyMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyMetric) ProtoMessage() {}

func (x *KeyMetric) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyMetric.ProtoReflect.Descriptor instead.
func (*KeyMetric) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{26}
}

func (x *KeyMetric) GetAccessCount() uint64 {
	if x != nil {
		return x.AccessCount
	}
	return 0
}

func (x *KeyMetric) GetFirstAccessed() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstAccessed
	}
	return nil
}

func (x *KeyMetric) GetLastAccessed() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAccessed
	}
	return nil
}

func (x *KeyMetric) GetSetCount() uint64 {
	if x != nil {
		return x.SetCount
	}
	return 0
}

func (x *KeyMetric) GetFirstSet() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstSet
	}
	return nil
}

func (x *KeyMetric) GetLastSet() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSet
	}
	return nil
}

func (x *KeyMetric) GetLockCount() uint64 {
	if x != nil {
		return x.LockCount
	}
	return 0
}

func (x *KeyMetric) GetFirstLocked() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstLocked
	}
	return nil
}

func (x *KeyMetric) GetLastLocked() *timestamppb.Timestamp {
	if x != nil {
		return x.LastLocked
	}
	return nil
}

// Event is a KeyEvent for an key, with additional context
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key is the key that the event occurred for
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// KeyEvent is the type of event
	Event KeyEvent `protobuf:"varint,2,opt,name=event,proto3,enum=keyquarry.KeyEvent" json:"event,omitempty"`
	// Time is the time the event occurred
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// ClientId is the client that triggered the event, or
	// 'keyquarry' for an internally-triggered event such
	// as Expired
	ClientId string `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{27}
}

func (x *Event) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Event) GetEvent() KeyEvent {
	if x != nil {
		return x.Event
	}
	return KeyEvent_NO_EVENT
}

func (x *Event) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Event) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

// Key represents only a key
type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{28}
}

func (x *Key) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type InspectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// IncludeValue, if true, includes the value of the
	// key in the response
	IncludeValue bool `protobuf:"varint,2,opt,name=include_value,json=includeValue,proto3" json:"include_value,omitempty"`
	// IncludeMetrics, if true, includes the KeyMetric for the key
	IncludeMetrics bool `protobuf:"varint,3,opt,name=include_metrics,json=includeMetrics,proto3" json:"include_metrics,omitempty"`
}

func (x *InspectRequest) Reset() {
	*x = InspectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectRequest) ProtoMessage() {}

func (x *InspectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectRequest.ProtoReflect.Descriptor instead.
func (*InspectRequest) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{29}
}

func (x *InspectRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *InspectRequest) GetIncludeValue() bool {
	if x != nil {
		return x.IncludeValue
	}
	return false
}

func (x *InspectRequest) GetIncludeMetrics() bool {
	if x != nil {
		return x.IncludeMetrics
	}
	return false
}

type ClearRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Force bool `protobuf:"varint,1,opt,name=force,proto3" json:"force,omitempty"` // true to clear locked keys
}

func (x *ClearRequest) Reset() {
	*x = ClearRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearRequest) ProtoMessage() {}

func (x *ClearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearRequest.ProtoReflect.Descriptor instead.
func (*ClearRequest) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{30}
}

func (x *ClearRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

// ClearResponse indicates whether the store was cleared, and how many keys were deleted
type ClearResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                            // true if the store was cleared
	KeysDeleted uint64 `protobuf:"varint,2,opt,name=keys_deleted,json=keysDeleted,proto3" json:"keys_deleted,omitempty"` // Number of keys deleted
}

func (x *ClearResponse) Reset() {
	*x = ClearResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearResponse) ProtoMessage() {}

func (x *ClearResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearResponse.ProtoReflect.Descriptor instead.
func (*ClearResponse) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{31}
}

func (x *ClearResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ClearResponse) GetKeysDeleted() uint64 {
	if x != nil {
		return x.KeysDeleted
	}
	return 0
}

// ExistsResponse indicates whether a key exists
type ExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *ExistsResponse) Reset() {
	*x = ExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsResponse) ProtoMessage() {}

func (x *ExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsResponse.ProtoReflect.Descriptor instead.
func (*ExistsResponse) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{32}
}

func (x *ExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

// SetResponse indicates whether a key was set, and if it's a new key
type SetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`          // true if the key was set
	IsNew   bool `protobuf:"varint,2,opt,name=is_new,json=isNew,proto3" json:"is_new,omitempty"` // true if the key was not previously set
}

func (x *SetResponse) Reset() {
	*x = SetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetResponse) ProtoMessage() {}

func (x *SetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetResponse.ProtoReflect.Descriptor instead.
func (*SetResponse) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{33}
}

func (x *SetResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SetResponse) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

// DeleteResponse indicates whether a key was deleted
type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted bool `protobuf:"varint,1,opt,name=deleted,proto3" json:"deleted,omitempty"` // true if the key was deleted
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteResponse) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

// GetResponse represents the value of a key
type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"` // Value associated with the key
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_keyquarry_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_keyquarry_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_api_keyquarry_proto_rawDescGZIP(), []int{35}
}

func (x *GetResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_api_keyquarry_proto protoreflect.FileDescriptor

var file_api_keyquarry_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x28, 0x0a, 0x14, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xaf, 0x02, 0x0a, 0x15,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x4b, 0x65,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x6e, 0x0a,
	0x0c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x4b, 0x65,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x29, 0x0a,
	0x0f, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x2c, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64,
	0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x10, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x1e, 0x0a, 0x0a, 0x50, 0x6f, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x40, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x10, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x0e, 0x0a,
	0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6c, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x22, 0xbd, 0x05, 0x0a, 0x0d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x17, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x02, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x70,
	0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x07, 0x72, 0x65, 0x61,
	0x70, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x05, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x06, 0x52, 0x10, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x65,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x07, 0x52, 0x13, 0x65, 0x61,
	0x67, 0x65, 0x72, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x08, 0x52,
	0x0e, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72,
	0x79, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x08, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75,
	0x61, 0x72, 0x72, 0x79, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x61, 0x70, 0x65, 0x72,
	0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x65, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x75, 0x6e,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x63, 0x0a, 0x0e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x17, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x09, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xde, 0x03, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x15, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x03, 0x6e, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x08, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x75, 0x6e, 0x67, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x06, 0x52, 0x08, 0x65, 0x78, 0x70, 0x75, 0x6e, 0x67, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x07, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61,
	0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x08, 0x52, 0x0b, 0x6c,
	0x69, 0x66, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x10, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x48, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x66, 0x65, 0x73,
	0x70, 0x61, 0x6e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x6e, 0x65, 0x77, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x78, 0x70, 0x75, 0x6e, 0x67, 0x65, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x65,
	0x64, 0x22, 0x70, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,
	0x12, 0x17, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x61, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x22, 0xf5, 0x01, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0c, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x3a, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52,
	0x08, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x22, 0x21, 0x0a, 0x0d, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x2a,
	0x0a, 0x0e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x0b, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x66,
	0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x66, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22,
	0x28, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x26, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x22, 0x44, 0x0a, 0x14, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x22, 0x89, 0x04, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x1b, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x01, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x08, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65,
	0x73, 0x70, 0x61, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61, 0x6e,
	0x53, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x4b,
	0x65, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x48, 0x03, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x22, 0x24, 0x0a, 0x10, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xda, 0x03, 0x0a, 0x09, 0x4b, 0x65,
	0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x3f, 0x0a,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x4b, 0x65,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x03, 0x4b, 0x65,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0x70, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x24, 0x0a, 0x0c, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x0d, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6b, 0x65,
	0x79, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x28, 0x0a, 0x0e, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x22, 0x3e, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73,
	0x4e, 0x65, 0x77, 0x22, 0x2a, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22,
	0x23, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2a, 0xaa, 0x01, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0c, 0x0a,
	0x08, 0x45, 0x58, 0x50, 0x55, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x49, 0x46,
	0x45, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x4c,
	0x49, 0x46, 0x45, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x52, 0x45, 0x4e, 0x45, 0x57, 0x45, 0x44, 0x10,
	0x0a, 0x32, 0x86, 0x09, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x51, 0x75, 0x61, 0x72, 0x72, 0x79, 0x12,
	0x32, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x13, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72,
	0x72, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x6b, 0x65,
	0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x0e, 0x2e, 0x6b, 0x65, 0x79,
	0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x1a, 0x16, 0x2e, 0x6b, 0x65, 0x79,
	0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x19, 0x2e,
	0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75,
	0x61, 0x72, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18,
	0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75,
	0x61, 0x72, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x0e, 0x2e,
	0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x1a, 0x19, 0x2e,
	0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x03, 0x50, 0x6f, 0x70, 0x12,
	0x15, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x50, 0x6f, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72,
	0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x05, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x17, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61,
	0x72, 0x72, 0x79, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x4c, 0x69,
	0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1a, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72,
	0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75,
	0x61, 0x72, 0x72, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x6b, 0x65,
	0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79,
	0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x2e,
	0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72,
	0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x06, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75,
	0x61, 0x72, 0x72, 0x79, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x6b,
	0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6b, 0x65,
	0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x0b, 0x53, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1a, 0x2e, 0x6b,
	0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75,
	0x61, 0x72, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x57, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79,
	0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30,
	0x01, 0x12, 0x41, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x1b, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x4b, 0x65,
	0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x54, 0x0a, 0x0d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72,
	0x79, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72,
	0x72, 0x79, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x22, 0x5a, 0x20, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x63, 0x77, 0x61, 0x72, 0x64,
	0x2f, 0x6b, 0x65, 0x79, 0x71, 0x75, 0x61, 0x72, 0x72, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_keyquarry_proto_rawDescOnce sync.Once
	file_api_keyquarry_proto_rawDescData = file_api_keyquarry_proto_rawDesc
)

func file_api_keyquarry_proto_rawDescGZIP() []byte {
	file_api_keyquarry_proto_rawDescOnce.Do(func() {
		file_api_keyquarry_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_keyquarry_proto_rawDescData)
	})
	return file_api_keyquarry_proto_rawDescData
}

var file_api_keyquarry_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_keyquarry_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_api_keyquarry_proto_goTypes = []interface{}{
	(KeyEvent)(0),                 // 0: keyquarry.KeyEvent
	(*WatchKeyValueRequest)(nil),  // 1: keyquarry.WatchKeyValueRequest
	(*WatchKeyValueResponse)(nil), // 2: keyquarry.WatchKeyValueResponse
	(*WatchRequest)(nil),          // 3: keyquarry.WatchRequest
	(*ReadOnlyRequest)(nil),       // 4: keyquarry.ReadOnlyRequest
	(*ReadOnlyResponse)(nil),      // 5: keyquarry.ReadOnlyResponse
	(*RegisterRequest)(nil),       // 6: keyquarry.RegisterRequest
	(*RegisterResponse)(nil),      // 7: keyquarry.RegisterResponse
	(*DeleteRequest)(nil),         // 8: keyquarry.DeleteRequest
	(*PopRequest)(nil),            // 9: keyquarry.PopRequest
	(*GetRevisionRequest)(nil),    // 10: keyquarry.GetRevisionRequest
	(*RevisionResponse)(nil),      // 11: keyquarry.RevisionResponse
	(*EmptyRequest)(nil),          // 12: keyquarry.EmptyRequest
	(*ListKeysRequest)(nil),       // 13: keyquarry.ListKeysRequest
	(*ServerMetrics)(nil),         // 14: keyquarry.ServerMetrics
	(*HistoryMetrics)(nil),        // 15: keyquarry.HistoryMetrics
	(*EventMetrics)(nil),          // 16: keyquarry.EventMetrics
	(*KeyPressure)(nil),           // 17: keyquarry.KeyPressure
	(*KeyValue)(nil),              // 18: keyquarry.KeyValue
	(*UnlockRequest)(nil),         // 19: keyquarry.UnlockRequest
	(*UnlockResponse)(nil),        // 20: keyquarry.UnlockResponse
	(*LockRequest)(nil),           // 21: keyquarry.LockRequest
	(*LockResponse)(nil),          // 22: keyquarry.LockResponse
	(*ListKeysResponse)(nil),      // 23: keyquarry.ListKeysResponse
	(*ClearHistoryResponse)(nil),  // 24: keyquarry.ClearHistoryResponse
	(*InspectResponse)(nil),       // 25: keyquarry.InspectResponse
	(*KeyMetricRequest)(nil),      // 26: keyquarry.KeyMetricRequest
	(*KeyMetric)(nil),             // 27: keyquarry.KeyMetric
	(*Event)(nil),                 // 28: keyquarry.Event
	(*Key)(nil),                   // 29: keyquarry.Key
	(*InspectRequest)(nil),        // 30: keyquarry.InspectRequest
	(*ClearRequest)(nil),          // 31: keyquarry.ClearRequest
	(*ClearResponse)(nil),         // 32: keyquarry.ClearResponse
	(*ExistsResponse)(nil),        // 33: keyquarry.ExistsResponse
	(*SetResponse)(nil),           // 34: keyquarry.SetResponse
	(*DeleteResponse)(nil),        // 35: keyquarry.DeleteResponse
	(*GetResponse)(nil),           // 36: keyquarry.GetResponse
	(*timestamppb.Timestamp)(nil), // 37: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 38: google.protobuf.Duration
}
var file_api_keyquarry_proto_depIdxs = []int32{
	0,  // 0: keyquarry.WatchKeyValueResponse.key_event:type_name -> keyquarry.KeyEvent
	37, // 1: keyquarry.WatchKeyValueResponse.event_timestamp:type_name -> google.protobuf.Timestamp
	0,  // 2: keyquarry.WatchRequest.events:type_name -> keyquarry.KeyEvent
	37, // 3: keyquarry.RevisionResponse.timestamp:type_name -> google.protobuf.Timestamp
	16, // 4: keyquarry.ServerMetrics.events:type_name -> keyquarry.EventMetrics
	17, // 5: keyquarry.ServerMetrics.pressure:type_name -> keyquarry.KeyPressure
	15, // 6: keyquarry.ServerMetrics.history:type_name -> keyquarry.HistoryMetrics
	38, // 7: keyquarry.KeyValue.lock_duration:type_name -> google.protobuf.Duration
	38, // 8: keyquarry.KeyValue.lifespan:type_name -> google.protobuf.Duration
	38, // 9: keyquarry.LockRequest.duration:type_name -> google.protobuf.Duration
	37, // 10: keyquarry.InspectResponse.created:type_name -> google.protobuf.Timestamp
	37, // 11: keyquarry.InspectResponse.updated:type_name -> google.protobuf.Timestamp
	38, // 12: keyquarry.InspectResponse.lifespan:type_name -> google.protobuf.Duration
	37, // 13: keyquarry.InspectResponse.lifespan_set:type_name -> google.protobuf.Timestamp
	27, // 14: keyquarry.InspectResponse.metrics:type_name -> keyquarry.KeyMetric
	37, // 15: keyquarry.KeyMetric.first_accessed:type_name -> google.protobuf.Timestamp
	37, // 16: keyquarry.KeyMetric.last_accessed:type_name -> google.protobuf.Timestamp
	37, // 17: keyquarry.KeyMetric.first_set:type_name -> google.protobuf.Timestamp
	37, // 18: keyquarry.KeyMetric.last_set:type_name -> google.protobuf.Timestamp
	37, // 19: keyquarry.KeyMetric.first_locked:type_name -> google.protobuf.Timestamp
	37, // 20: keyquarry.KeyMetric.last_locked:type_name -> google.protobuf.Timestamp
	0,  // 21: keyquarry.Event.event:type_name -> keyquarry.KeyEvent
	37, // 22: keyquarry.Event.time:type_name -> google.protobuf.Timestamp
	18, // 23: keyquarry.KeyQuarry.Set:input_type -> keyquarry.KeyValue
	29, // 24: keyquarry.KeyQuarry.Get:input_type -> keyquarry.Key
	30, // 25: keyquarry.KeyQuarry.Inspect:input_type -> keyquarry.InspectRequest
	8,  // 26: keyquarry.KeyQuarry.Delete:input_type -> keyquarry.DeleteRequest
	29, // 27: keyquarry.KeyQuarry.Exists:input_type -> keyquarry.Key
	9,  // 28: keyquarry.KeyQuarry.Pop:input_type -> keyquarry.PopRequest
	31, // 29: keyquarry.KeyQuarry.Clear:input_type -> keyquarry.ClearRequest
	13, // 30: keyquarry.KeyQuarry.ListKeys:input_type -> keyquarry.ListKeysRequest
	12, // 31: keyquarry.KeyQuarry.Stats:input_type -> keyquarry.EmptyRequest
	12, // 32: keyquarry.KeyQuarry.ClearHistory:input_type -> keyquarry.EmptyRequest
	21, // 33: keyquarry.KeyQuarry.Lock:input_type -> keyquarry.LockRequest
	19, // 34: keyquarry.KeyQuarry.Unlock:input_type -> keyquarry.UnlockRequest
	10, // 35: keyquarry.KeyQuarry.GetRevision:input_type -> keyquarry.GetRevisionRequest
	6,  // 36: keyquarry.KeyQuarry.Register:input_type -> keyquarry.RegisterRequest
	4,  // 37: keyquarry.KeyQuarry.SetReadOnly:input_type -> keyquarry.ReadOnlyRequest
	3,  // 38: keyquarry.KeyQuarry.WatchStream:input_type -> keyquarry.WatchRequest
	26, // 39: keyquarry.KeyQuarry.GetKeyMetric:input_type -> keyquarry.KeyMetricRequest
	1,  // 40: keyquarry.KeyQuarry.WatchKeyValue:input_type -> keyquarry.WatchKeyValueRequest
	34, // 41: keyquarry.KeyQuarry.Set:output_type -> keyquarry.SetResponse
	36, // 42: keyquarry.KeyQuarry.Get:output_type -> keyquarry.GetResponse
	25, // 43: keyquarry.KeyQuarry.Inspect:output_type -> keyquarry.InspectResponse
	35, // 44: keyquarry.KeyQuarry.Delete:output_type -> keyquarry.DeleteResponse
	33, // 45: keyquarry.KeyQuarry.Exists:output_type -> keyquarry.ExistsResponse
	36, // 46: keyquarry.KeyQuarry.Pop:output_type -> keyquarry.GetResponse
	32, // 47: keyquarry.KeyQuarry.Clear:output_type -> keyquarry.ClearResponse
	23, // 48: keyquarry.KeyQuarry.ListKeys:output_type -> keyquarry.ListKeysResponse
	14, // 49: keyquarry.KeyQuarry.Stats:output_type -> keyquarry.ServerMetrics
	24, // 50: keyquarry.KeyQuarry.ClearHistory:output_type -> keyquarry.ClearHistoryResponse
	22, // 51: keyquarry.KeyQuarry.Lock:output_type -> keyquarry.LockResponse
	20, // 52: keyquarry.KeyQuarry.Unlock:output_type -> keyquarry.UnlockResponse
	11, // 53: keyquarry.KeyQuarry.GetRevision:output_type -> keyquarry.RevisionResponse
	7,  // 54: keyquarry.KeyQuarry.Register:output_type -> keyquarry.RegisterResponse
	5,  // 55: keyquarry.KeyQuarry.SetReadOnly:output_type -> keyquarry.ReadOnlyResponse
	28, // 56: keyquarry.KeyQuarry.WatchStream:output_type -> keyquarry.Event
	27, // 57: keyquarry.KeyQuarry.GetKeyMetric:output_type -> keyquarry.KeyMetric
	2,  // 58: keyquarry.KeyQuarry.WatchKeyValue:output_type -> keyquarry.WatchKeyValueResponse
	41, // [41:59] is the sub-list for method output_type
	23, // [23:41] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_api_keyquarry_proto_init() }
func file_api_keyquarry_proto_init() {
	if File_api_keyquarry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_keyquarry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchKeyValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchKeyValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyPressure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyMetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_keyquarry_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_keyquarry_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_api_keyquarry_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_api_keyquarry_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_api_keyquarry_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_api_keyquarry_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_api_keyquarry_proto_msgTypes[24].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_keyquarry_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_keyquarry_proto_goTypes,
		DependencyIndexes: file_api_keyquarry_proto_depIdxs,
		EnumInfos:         file_api_keyquarry_proto_enumTypes,
		MessageInfos:      file_api_keyquarry_proto_msgTypes,
	}.Build()
	File_api_keyquarry_proto = out.File
	file_api_keyquarry_proto_rawDesc = nil
	file_api_keyquarry_proto_goTypes = nil
	file_api_keyquarry_proto_depIdxs = nil
}
