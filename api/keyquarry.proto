syntax = "proto3";

option go_package = "github.com/arcward/keyquarry/api";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

package keyquarry;

service KeyQuarry {
  // Set sets a key/value pair. If the key already exists,
  // it will be updated. If the key already exists and is
  // locked, an error will be returned. If the key already
  // exists and is expired (and not locked), it will be deleted
  // and created as new.
  rpc Set(KeyValue) returns (SetResponse);
  // Get returns the value of a key. If the key does not exist,
  // an error will be returned.
  rpc Get(Key) returns (GetResponse);
  // Inspect returns metadata about a key. If the key does not
  // exist, an error will be returned.
  rpc Inspect(InspectRequest) returns (InspectResponse);
  // Delete deletes a key. If the key does not exist, an error
  // will be returned. If the key is locked, an error will
  // be returned.
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  // Exists indicates whether a key exists.
  rpc Exists(Key) returns (ExistsResponse);
  // Pop returns the value of a key and deletes it. If the key
  // is locked or doesn't exist, an error will be returned.
  rpc Pop(PopRequest) returns (GetResponse);
  // Clear deletes all unlocked keys from the store.
  rpc Clear(ClearRequest) returns (ClearResponse);
  // ListKeys returns a list of keys matching a pattern.
  rpc ListKeys(ListKeysRequest) returns (ListKeysResponse);
  // Stats returns statistics about the store.
  rpc Stats(EmptyRequest) returns (ServerMetrics);
  // ClearHistory deletes all history entries for unlocked keys.
  rpc ClearHistory(EmptyRequest) returns (ClearHistoryResponse);
  // Lock locks a key for a given duration. If the key is already locked, an
  // error will be returned. If no duration is provided, the lock will not
  // expire.
  rpc Lock(LockRequest) returns (LockResponse);
  // Unlock unlocks a key. If the key is not locked, nothing will happen.
  rpc Unlock(UnlockRequest) returns (UnlockResponse);
  // GetRevision gets the value of a key at a specific revision, with
  // its timestamp
  rpc GetRevision(GetRevisionRequest) returns (RevisionResponse);
  rpc Register(RegisterRequest) returns (RegisterResponse);
  rpc SetReadOnly(ReadOnlyRequest) returns (ReadOnlyResponse);
  rpc WatchStream(WatchRequest) returns (stream Event);
  rpc GetKeyMetric(KeyMetricRequest) returns (KeyMetric);
  rpc WatchKeyValue(WatchKeyValueRequest)  returns (stream WatchKeyValueResponse);
}


message WatchKeyValueRequest {
  string key = 1;
}

message WatchKeyValueResponse{
  string key = 1;
  bytes value = 2;
  string content_type = 3;
  uint64 hash = 4;
  uint64 version = 5;
  KeyEvent key_event = 6;
  string event_client_id = 7;
  google.protobuf.Timestamp event_timestamp = 8;
}

message WatchRequest {
  repeated string keys = 1;
  repeated KeyEvent events = 2;
  repeated string client_ids = 3;
}

message ReadOnlyRequest {
  bool enable = 1;
}

message ReadOnlyResponse {
  bool success = 1;
}

message RegisterRequest {}
message RegisterResponse {
  bool success = 1;
  string client_id = 2;
}

message DeleteRequest {
  string key = 1;
}

message PopRequest {
  string key = 1;
}

message GetRevisionRequest {
  string key = 1;
  int64 version = 2;

}

message RevisionResponse {
  bytes value = 1;
  google.protobuf.Timestamp timestamp = 2;
}

message EmptyRequest {}

/* ListKeysRequest represents a request to list keys in the store. The pattern
 * field is a glob pattern to match keys against. The limit field is the maximum
 * number of keys to return. */
message ListKeysRequest {
  string pattern = 1;  // Regex pattern to match keys against
  uint64 limit = 2;   // Maximum number of keys to return (0 for no limit)
  bool include_reserved = 3; // true to include reserved keys
}

// ServerMetrics describes the current state of the server
message ServerMetrics {
  // Keys is the current number of keys in the store
  optional uint64 keys = 1;
  // TotalSize is the sum (in bytes) of the current value sizes for all keys
  // in the store
  optional uint64 total_size = 2;
  // CurrentLocks is the current number of active locks
  optional uint64 current_locks = 3;
  // ClientIds is the number of registered clients
  optional uint64 client_ids = 4;
  // Reapers is the current number of active reapers
  optional uint64 reapers = 5;
  // EventSubscribers is the current number of active event subscribers
  optional uint64 event_subscribers = 6;
  // SnapshotsCreated is the number of snapshots created since the server started
  optional uint64 snapshots_created = 7;
  // EagerPruneTriggered is the number of times an eager prune was triggered
  // due to a request to create a new key while the store is at capacity
  optional uint64 eager_prune_triggered = 8;
  // PruneCompleted is the number of times the pruning job ran,
  // while over the configured prune threshold
  optional uint64 prune_completed = 9;
  EventMetrics events = 10;
  KeyPressure pressure = 11;
  HistoryMetrics history = 12;
}

message HistoryMetrics {
  optional uint64 keys = 1;
  optional uint64 revisions = 2;
}

// EventMetrics includes counts of KeyEvent types seen
message EventMetrics {
  // New is the number of new keys created
  optional uint64 new = 1;
  // Updated is the number of times an existing key's value was updated
  optional uint64 updated = 2;
  // Deleted is the number of delete events
  optional uint64 deleted = 3;
  // Locked is the number of times a key was locked
  optional uint64 locked = 4;
  // Unlocked is the number of times a key was unlocked
  optional uint64 unlocked = 5;
  // Expired is the number of times a key expired
  optional uint64 expired = 6;
  // Expunged is the number of times a key was expunged/pruned
  optional uint64 expunged = 7;
  // Accessed is the number of times a key's value was accessed,
  // either by a Set, Pop, or Inspect with include_value=true request
  optional uint64 accessed = 8;
  // LifespanSet is the number of times a key lifespan was initially
  // set, or an existing lifespan was changed
  optional uint64 lifespan_set = 9;
  // LifespanRenewed is the number of times a key's lifespan was
  // extended via an update to the key value, or by setting
  // the lifespan on an existing key to its current lifespan value
  optional uint64 lifespan_renewed = 10;
}

// KeyPressure represents the pressure on the key store,
// which is the current number of keys as related to the
// configured maximum, and prune settings
message KeyPressure {
  // Keys is the current number of keys in the store
  optional uint64 keys = 1;
  // Max is the configured maximum number of keys (Config.MaxNumberOfKeys)
  optional uint64 max = 2;
  // Used is the current number of keys divided by the maximum number of keys
  optional float used = 3;

}


// KeyValue represents a key/value pair
message KeyValue {
  // Key is a unique identifier for this key-value pair. If the key already
  // exists, its value will be updated, as long as there's no active lock
  // by another client.
  string key = 1;
  // Value to associate with the key.
  bytes value = 2;
  // Content type to set. If not set, the content type will be inferred from
  // the value.
  string content_type = 3;
  // LockDuration either sets a new lock for the key with the
  // provided duration, or updates the duration of an existing lock.
  // If a lock exists under another client, an error will be returned.
  optional google.protobuf.Duration lock_duration = 4;
  // Lifespan is a duration after which the key will be automatically
  // deleted. This overrides any existing lock (so if you lock a key
  // for longer than its lifespan, it will be deleted before the lock
  // expires).
  // Subsequent updates to the key will reset the lifespan timer. If
  // you specify a lifespan on a key that already has a lifespan, the
  // new lifespan will be used.
  optional google.protobuf.Duration lifespan = 5;  // Expiration options
}

// UnlockRequest represents a request to unlock a key. If the key
// is not already locked, nothing will happen. If the key is locked
// by another client, an error will be returned.
message UnlockRequest {
  string key = 1;
}

// UnlockResponse indicates whether a key was unlocked
message UnlockResponse {
  bool success = 1;
}

// LockRequest represents a request to lock a key
message LockRequest {
  // Key is the key to lock
  string key = 1;
  // Duration to lock the key, after which it will automatically unlock.
  google.protobuf.Duration duration = 2;
  // CreateIfMissing will create the key with an empty value, if it doesn't
  // already exist.
  bool create_if_missing = 3;
}

// LockResponse indicates whether a key was locked
message LockResponse {
  bool success = 1; // true if the lock was acquired
}

// ListKeysResponse represents a list of keys
message ListKeysResponse {
  repeated string keys = 1;
}

message ClearHistoryResponse {
  int64 keys = 1;  // Number of keys cleared
  int64 cleared = 2;  // Number of history entries cleared
}

// InspectResponse represents the metadata for a key/value pair
message InspectResponse {
  string key = 1 ; // Key of value
  uint64 hash = 2; // Hash is the FNV hash of the value
  google.protobuf.Timestamp created = 3;  // Unix timestamp of when the key was created
  optional google.protobuf.Timestamp updated = 4;  // Unix timestamp of when the key was last updated
  uint64 version = 5;  // Version of the key (incremented on each update)
  uint64 size = 7;  // Size of the value in bytes
  optional bool locked = 8;  // true if the key is locked
  google.protobuf.Duration lifespan = 9;
  google.protobuf.Timestamp lifespan_set = 10;
  string content_type = 11; // Content type of the value
  optional bytes value = 12;
  optional KeyMetric metrics = 13;
}

message KeyMetricRequest {
  string key = 1;
}

// KeyMetric provides counters and timestamps for
// access/set/lock operations for the global lifetime
// of a key. These metrics survive key deletions/expirations/etc,
// as well as server restarts if snapshotting is enabled.
message KeyMetric {
  // AccessCount is the number of times the value
  // of the key has been accessed, either via
  // Get, Pop, or Inspect with include_value=true
  uint64 access_count = 1;
  // FirstAccessed is the timestamp of the first time
  // the key value was accessed
  google.protobuf.Timestamp first_accessed = 2;
  // LastAccessed is the timestamp of the most recent
  // access
  google.protobuf.Timestamp last_accessed = 3;
  // SetCount is the number of times the value has been
  // set or updated
  uint64 set_count = 4;
  // FirstSet is the timestamp of the first time the value
  // of the key was set.
  google.protobuf.Timestamp first_set = 5;
  // LastSet is the timestamp of the most recent time
  // the value was set or updated.
  google.protobuf.Timestamp last_set = 6;
  // LockCount is the number of times the key has been locked.
  uint64 lock_count = 7;
  // FirstLocked is the timestamp of the first time the key was locked
  google.protobuf.Timestamp first_locked = 8;
  // LastLocked is the timestamp of the most recent time the key was locked
  google.protobuf.Timestamp last_locked = 9;
}

// KeyEvent reflects the type of event that occurred for a key
enum KeyEvent {
  NO_EVENT = 0;
  CREATED = 1; // Key was created
  UPDATED = 2; // Key value was updated
  DELETED = 3; // Key was deleted
  EXPIRED = 4; // Key expired
  LOCKED = 5; // Key was locked
  UNLOCKED = 6; // Key was unlocked
  EXPUNGED = 7; // Key was expunged/pruned
  ACCESSED = 8; // Key value was accessed
  LIFESPAN_SET = 9; // Key lifespan was set
  LIFESPAN_RENEWED = 10; // Key lifespan was renewed via an update to the key value
}

// Event is a KeyEvent for an key, with additional context
message Event {
  // Key is the key that the event occurred for
  string key = 1;
  // KeyEvent is the type of event
  KeyEvent event = 2;
  // Time is the time the event occurred
  google.protobuf.Timestamp time = 3;
  // ClientId is the client that triggered the event, or
  // 'keyquarry' for an internally-triggered event such
  // as Expired
  string client_id = 4;
}

// Key represents only a key
message Key {
  string key = 1;
}

message InspectRequest {
  string key = 1;
  // IncludeValue, if true, includes the value of the
  // key in the response
  bool include_value = 2;
  // IncludeMetrics, if true, includes the KeyMetric for the key
  bool include_metrics = 3;
}

message ClearRequest {
  bool force = 1; // true to clear locked keys
}

// ClearResponse indicates whether the store was cleared, and how many keys were deleted
message ClearResponse {
  bool success = 1;  // true if the store was cleared
  uint64 keys_deleted = 2;  // Number of keys deleted
}

// ExistsResponse indicates whether a key exists
message ExistsResponse {
  bool exists = 1;
}

// SetResponse indicates whether a key was set, and if it's a new key
message SetResponse {
  bool success = 1;  // true if the key was set
  bool is_new = 2;  // true if the key was not previously set
}

// DeleteResponse indicates whether a key was deleted
message DeleteResponse {
  bool deleted = 1;  // true if the key was deleted
}

// GetResponse represents the value of a key
message GetResponse {
  bytes value = 1;  // Value associated with the key
}
