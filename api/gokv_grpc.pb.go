// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/gokv.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeyValueStoreClient is the client API for KeyValueStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyValueStoreClient interface {
	// Set sets a key/value pair. If the key already exists,
	// it will be updated. If the key already exists and is
	// locked, an error will be returned. If the key already
	// exists and is expired (and not locked), it will be deleted
	// and created as new.
	Set(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*SetResponse, error)
	// Get returns the value of a key. If the key does not exist,
	// an error will be returned.
	Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*GetResponse, error)
	// GetKeyInfo returns metadata about a key. If the key does not
	// exist, an error will be returned.
	GetKeyInfo(ctx context.Context, in *Key, opts ...grpc.CallOption) (*GetKeyValueInfoResponse, error)
	// Delete deletes a key. If the key does not exist, an error
	// will be returned. If the key is locked, an error will
	// be returned.
	Delete(ctx context.Context, in *Key, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Exists indicates whether a key exists.
	Exists(ctx context.Context, in *Key, opts ...grpc.CallOption) (*ExistsResponse, error)
	// Pop returns the value of a key and deletes it. If the key
	// is locked or doesn't exist, an error will be returned.
	Pop(ctx context.Context, in *Key, opts ...grpc.CallOption) (*GetResponse, error)
	// Clear deletes all unlocked keys from the store.
	Clear(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ClearResponse, error)
	// ListKeys returns a list of keys matching a pattern.
	ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error)
	// Stats returns statistics about the store.
	Stats(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ServerMetrics, error)
	// ClearHistory deletes all history entries for unlocked keys.
	ClearHistory(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ClearHistoryResponse, error)
	// Lock locks a key for a given duration. If the key is already locked, an
	// error will be returned. If no duration is provided, the lock will not
	// expire.
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error)
	// Unlock unlocks a key. If the key is not locked, nothing will happen.
	Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error)
	// GetRevision gets the value of a key at a specific revision, with
	// its timestamp
	GetRevision(ctx context.Context, in *GetRevisionRequest, opts ...grpc.CallOption) (*RevisionResponse, error)
}

type keyValueStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyValueStoreClient(cc grpc.ClientConnInterface) KeyValueStoreClient {
	return &keyValueStoreClient{cc}
}

func (c *keyValueStoreClient) Set(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, "/gokv.KeyValueStore/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStoreClient) Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/gokv.KeyValueStore/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStoreClient) GetKeyInfo(ctx context.Context, in *Key, opts ...grpc.CallOption) (*GetKeyValueInfoResponse, error) {
	out := new(GetKeyValueInfoResponse)
	err := c.cc.Invoke(ctx, "/gokv.KeyValueStore/GetKeyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStoreClient) Delete(ctx context.Context, in *Key, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/gokv.KeyValueStore/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStoreClient) Exists(ctx context.Context, in *Key, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, "/gokv.KeyValueStore/Exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStoreClient) Pop(ctx context.Context, in *Key, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/gokv.KeyValueStore/Pop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStoreClient) Clear(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ClearResponse, error) {
	out := new(ClearResponse)
	err := c.cc.Invoke(ctx, "/gokv.KeyValueStore/Clear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStoreClient) ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error) {
	out := new(ListKeysResponse)
	err := c.cc.Invoke(ctx, "/gokv.KeyValueStore/ListKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStoreClient) Stats(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ServerMetrics, error) {
	out := new(ServerMetrics)
	err := c.cc.Invoke(ctx, "/gokv.KeyValueStore/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStoreClient) ClearHistory(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ClearHistoryResponse, error) {
	out := new(ClearHistoryResponse)
	err := c.cc.Invoke(ctx, "/gokv.KeyValueStore/ClearHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStoreClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error) {
	out := new(LockResponse)
	err := c.cc.Invoke(ctx, "/gokv.KeyValueStore/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStoreClient) Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error) {
	out := new(UnlockResponse)
	err := c.cc.Invoke(ctx, "/gokv.KeyValueStore/Unlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStoreClient) GetRevision(ctx context.Context, in *GetRevisionRequest, opts ...grpc.CallOption) (*RevisionResponse, error) {
	out := new(RevisionResponse)
	err := c.cc.Invoke(ctx, "/gokv.KeyValueStore/GetRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyValueStoreServer is the server API for KeyValueStore service.
// All implementations must embed UnimplementedKeyValueStoreServer
// for forward compatibility
type KeyValueStoreServer interface {
	// Set sets a key/value pair. If the key already exists,
	// it will be updated. If the key already exists and is
	// locked, an error will be returned. If the key already
	// exists and is expired (and not locked), it will be deleted
	// and created as new.
	Set(context.Context, *KeyValue) (*SetResponse, error)
	// Get returns the value of a key. If the key does not exist,
	// an error will be returned.
	Get(context.Context, *Key) (*GetResponse, error)
	// GetKeyInfo returns metadata about a key. If the key does not
	// exist, an error will be returned.
	GetKeyInfo(context.Context, *Key) (*GetKeyValueInfoResponse, error)
	// Delete deletes a key. If the key does not exist, an error
	// will be returned. If the key is locked, an error will
	// be returned.
	Delete(context.Context, *Key) (*DeleteResponse, error)
	// Exists indicates whether a key exists.
	Exists(context.Context, *Key) (*ExistsResponse, error)
	// Pop returns the value of a key and deletes it. If the key
	// is locked or doesn't exist, an error will be returned.
	Pop(context.Context, *Key) (*GetResponse, error)
	// Clear deletes all unlocked keys from the store.
	Clear(context.Context, *EmptyRequest) (*ClearResponse, error)
	// ListKeys returns a list of keys matching a pattern.
	ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error)
	// Stats returns statistics about the store.
	Stats(context.Context, *EmptyRequest) (*ServerMetrics, error)
	// ClearHistory deletes all history entries for unlocked keys.
	ClearHistory(context.Context, *EmptyRequest) (*ClearHistoryResponse, error)
	// Lock locks a key for a given duration. If the key is already locked, an
	// error will be returned. If no duration is provided, the lock will not
	// expire.
	Lock(context.Context, *LockRequest) (*LockResponse, error)
	// Unlock unlocks a key. If the key is not locked, nothing will happen.
	Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error)
	// GetRevision gets the value of a key at a specific revision, with
	// its timestamp
	GetRevision(context.Context, *GetRevisionRequest) (*RevisionResponse, error)
	mustEmbedUnimplementedKeyValueStoreServer()
}

// UnimplementedKeyValueStoreServer must be embedded to have forward compatible implementations.
type UnimplementedKeyValueStoreServer struct {
}

func (UnimplementedKeyValueStoreServer) Set(context.Context, *KeyValue) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedKeyValueStoreServer) Get(context.Context, *Key) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKeyValueStoreServer) GetKeyInfo(context.Context, *Key) (*GetKeyValueInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyInfo not implemented")
}
func (UnimplementedKeyValueStoreServer) Delete(context.Context, *Key) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKeyValueStoreServer) Exists(context.Context, *Key) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedKeyValueStoreServer) Pop(context.Context, *Key) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pop not implemented")
}
func (UnimplementedKeyValueStoreServer) Clear(context.Context, *EmptyRequest) (*ClearResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (UnimplementedKeyValueStoreServer) ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeys not implemented")
}
func (UnimplementedKeyValueStoreServer) Stats(context.Context, *EmptyRequest) (*ServerMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedKeyValueStoreServer) ClearHistory(context.Context, *EmptyRequest) (*ClearHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearHistory not implemented")
}
func (UnimplementedKeyValueStoreServer) Lock(context.Context, *LockRequest) (*LockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedKeyValueStoreServer) Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (UnimplementedKeyValueStoreServer) GetRevision(context.Context, *GetRevisionRequest) (*RevisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRevision not implemented")
}
func (UnimplementedKeyValueStoreServer) mustEmbedUnimplementedKeyValueStoreServer() {}

// UnsafeKeyValueStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyValueStoreServer will
// result in compilation errors.
type UnsafeKeyValueStoreServer interface {
	mustEmbedUnimplementedKeyValueStoreServer()
}

func RegisterKeyValueStoreServer(s grpc.ServiceRegistrar, srv KeyValueStoreServer) {
	s.RegisterService(&KeyValueStore_ServiceDesc, srv)
}

func _KeyValueStore_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gokv.KeyValueStore/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreServer).Set(ctx, req.(*KeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStore_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gokv.KeyValueStore/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreServer).Get(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStore_GetKeyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreServer).GetKeyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gokv.KeyValueStore/GetKeyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreServer).GetKeyInfo(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStore_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gokv.KeyValueStore/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreServer).Delete(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStore_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gokv.KeyValueStore/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreServer).Exists(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStore_Pop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreServer).Pop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gokv.KeyValueStore/Pop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreServer).Pop(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStore_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gokv.KeyValueStore/Clear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreServer).Clear(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStore_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreServer).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gokv.KeyValueStore/ListKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreServer).ListKeys(ctx, req.(*ListKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStore_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gokv.KeyValueStore/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreServer).Stats(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStore_ClearHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreServer).ClearHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gokv.KeyValueStore/ClearHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreServer).ClearHistory(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStore_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gokv.KeyValueStore/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreServer).Lock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStore_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gokv.KeyValueStore/Unlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreServer).Unlock(ctx, req.(*UnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStore_GetRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreServer).GetRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gokv.KeyValueStore/GetRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreServer).GetRevision(ctx, req.(*GetRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyValueStore_ServiceDesc is the grpc.ServiceDesc for KeyValueStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyValueStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gokv.KeyValueStore",
	HandlerType: (*KeyValueStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _KeyValueStore_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _KeyValueStore_Get_Handler,
		},
		{
			MethodName: "GetKeyInfo",
			Handler:    _KeyValueStore_GetKeyInfo_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _KeyValueStore_Delete_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _KeyValueStore_Exists_Handler,
		},
		{
			MethodName: "Pop",
			Handler:    _KeyValueStore_Pop_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _KeyValueStore_Clear_Handler,
		},
		{
			MethodName: "ListKeys",
			Handler:    _KeyValueStore_ListKeys_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _KeyValueStore_Stats_Handler,
		},
		{
			MethodName: "ClearHistory",
			Handler:    _KeyValueStore_ClearHistory_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _KeyValueStore_Lock_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _KeyValueStore_Unlock_Handler,
		},
		{
			MethodName: "GetRevision",
			Handler:    _KeyValueStore_GetRevision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/gokv.proto",
}
